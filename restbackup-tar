#!/usr/bin/env bash
# Copyright (C) 2011 Rest Backup LLC
#
# Use of this software is subject to the RestBackup.com Terms of Use,
# http://www.restbackup.com/terms
#
# Version 1.0
# Author: Michael Leonhard

function emit_description {
    cat <<EOF
Restbackup-tar is a unix command-line tool for performing incremental backups to RestBackup(tm) and restoring from any point in time
EOF
}

function emit_usage {
    cat <<EOF
Usage:
  restbackup-tar ACCESSURL --full DIR
  restbackup-tar ACCESSURL --incremental DIR
  restbackup-tar ACCESSURL --list
  restbackup-tar ACCESSURL --restore NAME
  
  ACCESSURL is a RestBackup(tm) access url such as
      https://Z2J3BB:R0GaTKS0vM3l3FgY@us.restbackup.com/
  DIR is the name of a directory to back up
  NAME is the name of a previous backup, such as 'data-20110204T103243Z'
    Specify the archive file name to restore a particular backup:
    '/data-20110204T103243Z-inc3.tar.gz'
EOF
}

function emit_examples {
    cat <<EOF
Examples:
  $ mkdir data
  $ echo "some data" >data/aaa.txt
  $ restbackup-tar https://Z2J3BB:R0GaTKS0vM3l3Y@us.restbackup.com/ --full data
  Performing full backup 'data-20110204T195125Z'
  Writing archive to temporary file /tmp/fileXqqRNR.restbackup.tar.gz
  Uploading to https://us.restbackup.com/data-20110204T195125Z-full.tar.gz
  Removing temporary file
  Done.
  $ echo "new data" >>data/bbb.txt
  $ restbackup-tar https://Z2B:RGY@us.restbackup.com/ --incremental data
  Performing incremental backup 1 of 'data-20110204T195125Z'
  Writing archive to temporary file /tmp/fileKA8nQz.restbackup.tar.gz
  Uploading to https://us.restbackup.com/data-20110204T195125Z-inc1.tar.gz
  Removing temporary file
  Done.
  $ echo "more new data" >data/ccc.txt
  $ restbackup-tar https://.../ --incremental data
  ...
  $ restbackup-tar https://Z2B:RGY@us.restbackup.com/ --list
  2011-02-04T19:51:26Z	245	/data-20110204T195125Z-full.tar.gz
  2011-02-04T19:51:40Z	239	/data-20110204T195125Z-inc1.tar.gz
  2011-02-04T19:51:56Z	242	/data-20110204T195125Z-inc2.tar.gz
  $ restbackup-tar https://Z2B:RGY@us.restbackup.com/ --restore /data-20110204T195125Z-inc1.tar.gz
  Restoring to data-20110204T195125Z/
  Retrieving https://us.restbackup.com/data-20110204T195125Z-full.tar.gz
  data/aaa.txt
  Retrieving https://us.restbackup.com/data-20110204T195125Z-inc1.tar.gz
  data/bbb.txt
  Done.
  $ ls data-20110204T195125Z/
  aaa.txt bbb.txt
  $ rm -rf data-20110204T195125Z/
  $ restbackup-tar https://Z2B:RGY@us.restbackup.com/ --restore data-20110204T195125Z
  Restoring to data-20110204T195125Z/
  Retrieving https://us.restbackup.com/data-20110204T195125Z-full.tar.gz
  data/aaa.txt
  Retrieving https://us.restbackup.com/data-20110204T195125Z-inc1.tar.gz
  data/bbb.txt
  Retrieving https://us.restbackup.com/data-20110204T195125Z-inc2.tar.gz
  data/ccc.txt
  Done.
  $ ls data-20110204T195125Z/
  aaa.txt bbb.txt ccc.txt
EOF
    #                                                                           #
}

set -e

URL=$1
OPTYPE=$2
TARGETDIR=$3
BACKUP_NAME=$3

function check_arguments {
    (echo "$URL" |grep -E 'https://\w+:\w+@[-.a-zA-Z0-9]+(:[0-9]+)?/' >/dev/null) || \
	(echo "ERROR: access url is mal-formed '$URL'" >&2; return 1) || return 1
    
    if [ "$#" == "2" ]; then
	[ "$OPTYPE" == "--list" ] || return 1
	return 0
    fi
    
    [ "$#" == "3" ] || return 1
    
    if [ "$OPTYPE" == "--full" ] || [ "$OPTYPE" == "--incremental" ]; then
	[ -d "$TARGETDIR" ] || \
	    (echo "ERROR: Cannot read directory '$TARGETDIR'" >&2; return 1) || return 1
    elif [ "$OPTYPE" == "--restore" ]; then
	[ -n "$BACKUP_NAME" ] || return 1
    else
	return 1
    fi
    
    return 0
}

if [ "$#" == "0" ]; then
    emit_description
    emit_usage
    exit 1
elif [ "$1" == "--help" ]; then
    emit_description
    emit_usage
    emit_examples
    exit 1
elif ! check_arguments $@; then
    emit_usage >&2
    exit 1
fi

USERPASS=$(echo "$URL" |sed -re 'sM^https://(\w+:\w+)@.*$M\1M')
ENDPOINT=$(echo "$URL" |sed -re 'sM^https://\w+:\w+@(.*)$Mhttps://\1M')

if [ "$OPTYPE" == "--list" ]; then
    curl -sSu "$USERPASS" "$ENDPOINT"
    exit 0
elif [ "$OPTYPE" == "--full" ] || [ "$OPTYPE" == "--incremental" ]; then
    TAR_SNAPSHOT_FILE="$TARGETDIR/.restbackup-tar.tarsnapshot"
    BACKUP_NAME_FILE="$TARGETDIR/.restbackup-tar.backupname"
    LAST_BACKUP_LEVEL_FILE="$TARGETDIR/.restbackup-tar.lastbackuplevel"
    
    if [ "$OPTYPE" == "--full" ]; then
	TIMESTAMP=$(date --utc '+%Y%m%dT%H%M%SZ')
	TRIMMED_DIRNAME=$(echo "$TARGETDIR" |sed -re 'sM^(./)?(.*[^/])/?$M\2M')
	BACKUP_NAME="$TRIMMED_DIRNAME-$TIMESTAMP"
	echo "Performing full backup '$BACKUP_NAME'"
	echo -n "$BACKUP_NAME" >"$BACKUP_NAME_FILE"
	rm -f "$TAR_SNAPSHOT_FILE"
	LEVEL=0
	ARCHIVE_NAME="$BACKUP_NAME-full.tar.gz"
    else
	if ! [ -f $BACKUP_NAME_FILE ]; then
	    echo "ERROR: Cannot find file '$BACKUP_NAME_FILE'. Have you already performed a full backup?" >&2;
	    exit 1
	fi
	BACKUP_NAME=$(cat $BACKUP_NAME_FILE)
	LEVEL=$(cat $LAST_BACKUP_LEVEL_FILE)
	let "LEVEL = $LEVEL + 1"
	echo "Performing incremental backup $LEVEL of '$BACKUP_NAME'"
	ARCHIVE_NAME="$BACKUP_NAME-inc$LEVEL.tar.gz"
    fi
    
    TEMPFILE=$(tempfile -s .restbackup.tar.gz)
    echo "Writing archive to temporary file $TEMPFILE"
    tar czf "$TEMPFILE" -g "$TAR_SNAPSHOT_FILE" --exclude "$TARGETDIR"'/.restbackup-tar*' "$TARGETDIR/"
    
    FILE_URL="$ENDPOINT$ARCHIVE_NAME"
    echo "Uploading to $FILE_URL"
    CURL_OUTPUT=$(curl -isSu "$USERPASS" "$FILE_URL" -T "$TEMPFILE")
    if ! echo "$CURL_OUTPUT" |grep -E '^HTTP/[.0-9]+ 2[0-9]{2} ' >/dev/null; then
	echo "$CURL_OUTPUT" >&2
	exit 1
    fi
    
    echo "$LEVEL" >$LAST_BACKUP_LEVEL_FILE
    
    echo "Removing temporary file"
    rm -f $TEMPFILE
else
    if echo "$BACKUP_NAME" |grep -E -- '-full(\.tar\.gz)?$' >/dev/null; then
	MAXLEVEL=0
    elif echo "$BACKUP_NAME" |grep -E -- '-inc[0-9]+(\.tar\.gz)?$' >/dev/null; then
	MAXLEVEL=$(echo "$BACKUP_NAME" |sed -re 's/^.*-inc([0-9]+)(\.tar\.gz)?$/\1/')
    else
	MAXLEVEL=9999
    fi
    BACKUP_NAME=$(echo "$BACKUP_NAME" |sed -re'sM^/?(.*)$M\1M' |sed -re 'sM(-full|-inc[0-9]+)?(\.tar\.gz)?$MM')
    RESTORE_DIR=$(echo -n "$BACKUP_NAME" |sed -re 'sM/M#Mg')
    echo "Restoring to $RESTORE_DIR/"
    mkdir $RESTORE_DIR || exit 1
    
    # Download and extract full backup file first
    FILE_URL=$ENDPOINT$BACKUP_NAME-full.tar.gz
    echo "Retrieving $FILE_URL"
    CURL_OUTPUT=$(curl -IsSu $USERPASS "$FILE_URL")
    if ! echo "$CURL_OUTPUT" |grep -E '^HTTP/1\.. 200 .*' >/dev/null; then
	echo "$CURL_OUTPUT"
	exit 1
    fi
    curl -sSu $USERPASS "$FILE_URL" |tar xzvGC "$RESTORE_DIR" --strip-components=1
    
    # Download and extract each incremental backup
    LEVEL=0
    while (("$LEVEL" < "$MAXLEVEL")); do
	let "LEVEL = $LEVEL + 1"
	FILE_URL="$ENDPOINT$BACKUP_NAME-inc$LEVEL.tar.gz"
	CURL_OUTPUT=$(curl -IsSu $USERPASS "$FILE_URL")
	echo "$CURL_OUTPUT" |grep -E '^HTTP/1\.. 404 .*' >/dev/null && break
	if ! echo "$CURL_OUTPUT" |grep -E '^HTTP/1\.. 200 .*' >/dev/null; then
	    echo "$CURL_OUTPUT"
	    exit 1
	fi
	echo "Retrieving $FILE_URL"
	curl -sSu $USERPASS "$FILE_URL" |tar xzvGC "$RESTORE_DIR" --strip-components=1 || break
    done
fi

echo "Done."
exit 0
